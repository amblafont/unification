#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{tikz-cd}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
theorems-ams-extended
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Pattern unification in second-order abstract syntax
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Kl}[1]{Kl_{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Eil}[1]{#1\text{-alg}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\directed}[3]{#1\supset_{#3}#2}
\end_inset

 
\begin_inset FormulaMacro
\newcommand{\C}{\mathcal{C}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Nom}{\mathrm{Nom}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\op}[1]{#1^{op}}
\end_inset


\end_layout

\begin_layout Standard
We give a correctness proof for pattern unification for second-order abstract
 languages.
 Other envisionned applications of our abstract categorical proof are unificatio
n for linear or polymorphic syntax (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:applications"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 In Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:cat-settings"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we propose a general categorical setting in which pattern unification
 applies, with the nominal sets in mind.
 In this case, a second-order syntax with metavariables applied to distinct
 variables (according to the pattern restriction) corresponds to a free
 monad applied a coproduct of representable presheaves.
\end_layout

\begin_layout Standard
In Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Main-result"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we state our main result that justifies pattern unification algorithms.
 Then we tackle the proof algorithm, starting with the pruning phase (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:pruning-phase"
plural "false"
caps "false"
noprefix "false"

\end_inset

), the coequalising phase (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:coequalising-phase"
plural "false"
caps "false"
noprefix "false"

\end_inset

), the occur-check phase (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:occur-check"
plural "false"
caps "false"
noprefix "false"

\end_inset

), and finally we justify termination (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Termination"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Notation
Given a natural number 
\begin_inset Formula $n$
\end_inset

 we denote by 
\begin_inset Formula $\text{\ensuremath{\underline{n}}}$
\end_inset

 the set 
\begin_inset Formula $\{0,\dots,n-1\}$
\end_inset

.
\end_layout

\begin_layout Section
Categorical setting
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:cat-settings"

\end_inset


\end_layout

\begin_layout Standard
Here we describe our setting, based on the example nominal sets.
 We explicitly refer to these assumptions in the document when they are
 used.
\end_layout

\begin_layout Assumption
\begin_inset CommandInset label
LatexCommand label
name "assu:presentable"

\end_inset

We assume given a locally presentable category 
\begin_inset Formula $\C$
\end_inset

.
\end_layout

\begin_layout Standard
Presentability ensures (in particular) that 
\begin_inset Formula $\C$
\end_inset

 is bicomplete.
 
\end_layout

\begin_layout Remark
We need cocompleteness so that we can compute free monads of a finitary
 endofunctor.
 Completeness ensures that this free monad is algebraically free (TODO check
 that this is really needed).
\end_layout

\begin_layout Question
is bicompleteness enough? 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Maybe we could weaken this assumption and let the algorithm fail if some
 particular colimits do not exist? 
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
and that certain limits commute with certain colimits (e.g., pullbacks commute
 with coproducts).
 
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: check, from the definition of reflective subcat of a presheaf cat
\end_layout

\end_inset


\end_layout

\begin_layout Example
Consider 
\begin_inset Formula $\Nom$
\end_inset

 the category of nominal sets, as functors 
\begin_inset Formula $\mathbb{F}_{m}\rightarrow Set$
\end_inset

 preserving pullbacks, where 
\begin_inset Formula $\mathbb{F}_{m}$
\end_inset

 is the category of finite cardinals and injections between them.
 
\end_layout

\begin_layout Assumption
\begin_inset CommandInset label
LatexCommand label
name "assu:extensive"

\end_inset


\begin_inset Formula $\C$
\end_inset

 is extensive.
\end_layout

\begin_layout Standard
This is useful for coproduct properties (e.g., coproduct injections 
\begin_inset Formula $A\hookrightarrow A+B\hookleftarrow B$
\end_inset

 are monomorphic).
\end_layout

\begin_layout Example
As a topos, 
\begin_inset Formula $\Nom$
\end_inset

 is extensive.
\end_layout

\begin_layout Assumption
We assume given a full subcategory embedding 
\begin_inset Formula $D\xrightarrow{K}\C$
\end_inset

.
\end_layout

\begin_layout Example
Representable presheaves 
\begin_inset Formula $\hom_{\mathbb{F}_{m}}(n,-):\mathbb{F}_{m}\rightarrow Set$
\end_inset

 preserve limits and thus induce nominal sets.
 Thus, the yoneda embedding 
\begin_inset Formula $\op{\mathbb{F}_{m}}\rightarrow[\mathbb{F}_{m},Set]$
\end_inset

 factors as 
\begin_inset Formula $\op{\mathbb{F}_{m}}\xrightarrow{K}\Nom\hookrightarrow[\mathbb{F}_{m},Set]$
\end_inset

 
\end_layout

\begin_layout Definition
We denote by 
\begin_inset Formula $D^{+}\xrightarrow{K^{+}}\C$
\end_inset

 the full subcategory of 
\begin_inset Formula $\C$
\end_inset

 consisting of finite coproducts of objects of 
\begin_inset Formula $D$
\end_inset

.
\end_layout

\begin_layout Definition
We will be interested in coequalisers in 
\begin_inset Formula $D^{+}$
\end_inset

.
\end_layout

\begin_layout Assumption
\begin_inset CommandInset label
LatexCommand label
name "assu:finite-connected"

\end_inset


\begin_inset Formula $D$
\end_inset

 has finite connected colimits and 
\begin_inset Formula $K$
\end_inset

 preserve them.
\end_layout

\begin_layout Standard
This is to deal with the case 
\begin_inset Formula $M(\vec{x})=N(\vec{y})$
\end_inset

.
 Note that this statement is equivalent by replacing finite connected colimits
 with coequalisers and pushouts.
 
\end_layout

\begin_layout Example
In the case of nominal sets, the yoneda embedding 
\begin_inset Formula $K:\op{\mathbb{F}_{m}}\rightarrow Nom$
\end_inset

 preserves them because nominal sets are functors 
\begin_inset Formula $\mathbb{F}_{m}\rightarrow Set$
\end_inset

 preserving finite connected limits.
\end_layout

\begin_layout Remark
I think that the algorithm still works without this assumption: it is just
 that at some point we need to compute a colimit of elements of 
\begin_inset Formula $D$
\end_inset

, in particular in Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:case-metavars"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 We already know that such a colimit exists in 
\begin_inset Formula $\C$
\end_inset

, but in concrete examples, it is better to know that we can compute them
 in 
\begin_inset Formula $D$
\end_inset

 because this category is simpler 
\color red
(TODO: think more about it)
\color inherit
.
\end_layout

\begin_layout Assumption
\begin_inset CommandInset label
LatexCommand label
name "assu:epis"

\end_inset

Morphisms in 
\begin_inset Formula $D$
\end_inset

 are epimorphisms.
\end_layout

\begin_layout Standard
In the case of nominal sets, this comes from the fact that we restrict to
 monomorphisms.
 Note that the image by 
\begin_inset Formula $K$
\end_inset

 of an epimorphism is epimorphic by 
\begin_inset CommandInset ref
LatexCommand ref
reference "assu:finite-connected"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Assumption
\begin_inset CommandInset label
LatexCommand label
name "assu:tiny"

\end_inset

For each object 
\begin_inset Formula $d\in D$
\end_inset

, 
\begin_inset Formula $\hom_{\C}(Kd,-)$
\end_inset

 preserves coproducts (i.e., 
\begin_inset Formula $d$
\end_inset

 is connected) and filtered colimits (TODO: do we really need the latter?).
\begin_inset Note Note
status open

\begin_layout Plain Layout
coproducts of filtered cat?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Again, this is useful to know to factor 
\begin_inset Formula $Kd\rightarrow A+B$
\end_inset

 as 
\begin_inset Formula $Kd\rightarrow A$
\end_inset

 or 
\begin_inset Formula $Kd\rightarrow B$
\end_inset

.
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Example
Because pullbacks commute with coproducts and filtered colimits in sets,
 such colimits in 
\begin_inset Formula $\Nom$
\end_inset

 are computed pointwise and thus representable presheaves have the required
 property.
\end_layout

\begin_layout Assumption
We assume given a finitary endofunctor 
\begin_inset Formula $F$
\end_inset

 on 
\begin_inset Formula $\C$
\end_inset

.
 We denote by 
\begin_inset Formula $T$
\end_inset

 the generated free monad 
\begin_inset Formula $F^{*}$
\end_inset

.
\end_layout

\begin_layout Example
\begin_inset CommandInset label
LatexCommand label
name "ex:lambda-endo"

\end_inset

Consider the endofunctor on 
\begin_inset Formula $Nom$
\end_inset

 corresponding to 
\begin_inset Formula $\lambda$
\end_inset

-calculus: 
\begin_inset Formula $F(X)=I+X\times X+X^{I}$
\end_inset

, where 
\begin_inset Formula $I$
\end_inset

 is the representable presheaf 
\begin_inset Formula $y1$
\end_inset

.
 Note that 
\begin_inset Formula $X_{n}^{I}=X_{n+1}$
\end_inset

.
\end_layout

\begin_layout Assumption
\begin_inset CommandInset label
LatexCommand label
name "assu:F-shape"

\end_inset


\begin_inset Formula $F(X)$
\end_inset

 is of the shape 
\begin_inset Formula $I+\coprod_{i}R_{i}(X)\times S_{i}$
\end_inset

, where
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $I$
\end_inset

 is an object of 
\begin_inset Formula $\C$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $R_{i}$
\end_inset

 is right adjoint to some 
\begin_inset Formula $L_{i}$
\end_inset

; 
\end_layout

\begin_layout Itemize
\begin_inset Formula $S_{i}$
\end_inset

 is a orthogonal to the class of all morphisms (i.e., given any span 
\begin_inset Formula $S_{i}\leftarrow A\rightarrow B$
\end_inset

, there exists a unique 
\begin_inset Formula $B\rightarrow S_{i}$
\end_inset

 completing the triangle) 
\begin_inset Note Note
status open

\begin_layout Plain Layout
ou alors on demande que 
\begin_inset Formula $S_{i}$
\end_inset

 est stable par pushout
\end_layout

\end_inset

.
 Intuitively, 
\begin_inset Formula $S_{i}$
\end_inset

 is the output type 
\begin_inset Quotes eld
\end_inset

dirac
\begin_inset Quotes erd
\end_inset

 (not used for untyped)
\begin_inset Note Note
status open

\begin_layout Plain Layout
ou alors on demande que tout diagramme 
\begin_inset Formula $B\leftarrow A\rightarrow S_{i}$
\end_inset

 se complete en un carre avec 
\begin_inset Formula $S_{i}$
\end_inset

 dans le dernier coin.
 Ce qui signifie que 
\begin_inset Formula $\hom(-,S_{i})$
\end_inset

 a une action covariante.
 Ou encore que 
\begin_inset Formula $S_{i}\rightarrow1$
\end_inset

 est right ortogonal a tout, ou encore que 
\begin_inset Formula $S_{i}$
\end_inset

 est orthogonal a tous les morphismes (d'apres la def de Adamek), et ptet
 qu'alors on n'a pas besoin de la sous-terminalite.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\color red
\begin_inset Note Note
status open

\begin_layout Plain Layout

\color red
(do we really need a full adjoint or some relative adjoint when the domain
 is from 
\begin_inset Formula $D$
\end_inset

? does this adjoint exists in the linear setting?)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $L_{i}K=\coprod_{j\in J}KL'_{i,j}$
\end_inset

 for some finite family of endofunctors 
\begin_inset Formula $(L'_{i,j})_{j}$
\end_inset

 on 
\begin_inset Formula $D$
\end_inset

.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
a finite colimit is too general, we really need coproducts in the pruning
 phase, see Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:case-KA-RiTC"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Example
Continuing Example
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "ex:lambda-endo"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset Formula $X\mapsto X\times X$
\end_inset

 is right adjoint to 
\begin_inset Formula $X\mapsto X+X$
\end_inset

.
 Moreover, 
\begin_inset Formula $X\mapsto X^{I}$
\end_inset

 is right adjoint to 
\begin_inset Formula $X\mapsto X\times I$
\end_inset

.
 If 
\begin_inset Formula $X$
\end_inset

 is a representable presheaf 
\begin_inset Formula $yn$
\end_inset

, then 
\begin_inset Formula $yn\times I=yn\times y1\simeq y(n+1)$
\end_inset

.
 Therefore, 
\begin_inset Formula $L'n=n+1$
\end_inset

.
 
\end_layout

\begin_layout Example

\color red
This condition is too strong: lambda claculs extended with a constant does
 not satisfy this constraint (really? Isn't the terminal functor right adjoint
 to the initial functor? Otherwise, can't we put the constants in 
\begin_inset Formula $I$
\end_inset

? ).
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Assumption
We assume given a monad 
\begin_inset Formula $T$
\end_inset

 relative to the embedding 
\begin_inset Formula $K^{+}$
\end_inset


\end_layout

\begin_layout Plain Layout
Typically, this will be a restriction of a term monad.
\end_layout

\begin_layout Assumption
We assume given a functor 
\begin_inset Formula $S:K^{+}\rightarrow Set$
\end_inset

.
\begin_inset Note Note
status open

\begin_layout Plain Layout
shall we rather enforce that if 
\begin_inset Formula $A+B\simeq C+D$
\end_inset

 then 
\begin_inset Formula $A\simeq C$
\end_inset

 or 
\begin_inset Formula $A\simeq D$
\end_inset

 or 
\begin_inset Formula $A\simeq C+D$
\end_inset

? Cf the notion of atomic
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Typically, this functor computes the 
\begin_inset Quotes eld
\end_inset

size
\begin_inset Quotes erd
\end_inset

 of a coproduct, added with the size 
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
We say that an object 
\begin_inset Formula $c$
\end_inset

 of 
\begin_inset Formula $C$
\end_inset

 preserves some shape of colimit (e.g., pushouts) if 
\begin_inset Formula $C(K-,c):C^{op}\rightarrow Set$
\end_inset

 preserves them.
\end_layout

\begin_layout Plain Layout
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Plain Layout
If 
\begin_inset Formula $C$
\end_inset

 is a presheaf category and 
\begin_inset Formula $K$
\end_inset

 is the yoneda embedding, so that we recover the usual meaning.
\end_layout

\begin_layout Assumption
We assume that all objects of 
\begin_inset Formula $C$
\end_inset

 preserve pushouts.
\end_layout

\begin_layout Assumption
\begin_inset Note Note
status open

\begin_layout Plain Layout
We assume given an object 
\begin_inset Formula $I$
\end_inset

 of 
\begin_inset Formula $C$
\end_inset

 preserving pushouts.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
This is the cas for 
\begin_inset Formula $C$
\end_inset

 the category of nominal sets, as presheaves over 
\begin_inset Formula $\mathbb{F}_{inj}$
\end_inset

 preserving pullbacks.
\end_layout

\begin_layout Plain Layout
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Assumption
\begin_inset Formula $TX=\mu Z.I+F_{X}(Z)$
\end_inset

 where 
\begin_inset Formula $F_{X}(Z)=\coprod_{i\in S_{X}}R_{X,i}(Z)$
\end_inset

 where 
\begin_inset Formula $R_{X,i}:C\rightarrow C$
\end_inset

 is right adjoint to 
\begin_inset Formula $L_{X,i}$
\end_inset

 and 
\begin_inset Formula $L_{X,i}K$
\end_inset

 is isomorphic to a colimit 
\begin_inset Formula $\int^{j}KL_{X,i,j}'$
\end_inset

.
 where 
\begin_inset Formula $L':D\rightarrow D$
\end_inset

 preserves pushouts.
 
\begin_inset Formula $T$
\end_inset

-algebra morphisms preserve 
\begin_inset Formula $I$
\end_inset

 and 
\begin_inset Formula $F_{-}$
\end_inset

.
\end_layout

\begin_layout Example
Take 
\begin_inset Formula $C$
\end_inset

 the category of nominal sets, as a reflective subcategory of 
\begin_inset Formula $Set^{\mathbb{F}_{m}}$
\end_inset

, and 
\begin_inset Formula $D$
\end_inset

 the full subcategory of representable presheaves.
 Take 
\begin_inset Formula $I$
\end_inset

 to be the identity nominal set: 
\begin_inset Formula $In=\underline{n}$
\end_inset

.
 Let 
\begin_inset Formula $TX=\mu Z.I+X+Z\times Z+Z\cdot O$
\end_inset

.
 Here 
\begin_inset Formula $T$
\end_inset

 is a free monad!! This is a monad with pattern variables and a binary operation
s.
\end_layout

\begin_layout Example
Je suggere la notation 
\begin_inset Formula $A,B,\dots$
\end_inset

 
\begin_inset Formula $\alpha,\beta$
\end_inset

 pour coproduits pour un tiny, 
\begin_inset Formula $X,Y,\dots$
\end_inset

 pour un normal.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Examples of relevant categorical contexts
\end_layout

\begin_layout Standard
All the applications that we provide are instances of the following construction.
 Let 
\begin_inset Formula $(C_{i})_{i}$
\end_inset

 be a family of categories such that each 
\begin_inset Formula $C_{i}$
\end_inset

 (except the last one, these properties taken from the paragraph before
 Section 8 in 
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:journals/acs/Menni03"
literal "false"

\end_inset


\color red
, the author says he will present more explictly his results in a later
 paper, but I couldn't find a reference)
\color inherit
:
\end_layout

\begin_layout Itemize
is boolean (meaning any subobject has a complement), 
\end_layout

\begin_layout Itemize
has effective unions (not sure what it means)
\end_layout

\begin_layout Itemize
has finite limits
\end_layout

\begin_layout Itemize
has finite coproducts
\end_layout

\begin_layout Itemize
there is no infinite chain of proper subobjects
\end_layout

\begin_layout Itemize
all morphisms are monomorphisms
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Denoting 
\begin_inset Formula $B_{i}$
\end_inset

 the core of 
\begin_inset Formula $C_{i}$
\end_inset

, the left Kan extension along 
\begin_inset Formula $B_{i}\rightarrow C_{i}$
\end_inset

 induces a monad.
 According to Menni, one can prove that its Kleisli category is a Grothendieck
 topos.
 Moreover, by 
\begin_inset CommandInset citation
LatexCommand cite
after "Theorem 1.7, Lemma 1.8"
key "reflectivkleisliesubcat"
literal "false"

\end_inset

, this category is equivalent the full subcategory 
\begin_inset Formula $\mathcal{P}_{i}$
\end_inset

 of functors 
\begin_inset Formula $C_{i}\rightarrow Set$
\end_inset

 preserving pullbacks.
\end_layout

\begin_layout Standard
Thus, 
\begin_inset Formula $\prod\mathcal{P}_{i}$
\end_inset

 is also a Grothendieck topos (by Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lem:product-topos"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and is equivalent to the full subcategory of functors 
\begin_inset Formula $\coprod_{i}C_{i}\rightarrow Set$
\end_inset

 preserving pullbacks.
 Thus, it contains the representables presheaves and we consider for 
\begin_inset Formula $K$
\end_inset

 the yoneda embedding.
\begin_inset Note Note
status open

\begin_layout Plain Layout
ou alors utiliser le fait que dans Kleisili on dit que c'est un expoential
 ideal et donc d'apres la def de Elephant, il suffit de montrer qu'il y
 a des egalsiateurs? mais ca montre seulement que c'est un topos elementaire,
 pas de Grothendieck (or on voudrait que les yoneads fussent de la partie
 comme la sous-cat D).
 Pour le sous-objet classificateur, il faut prendre 
\begin_inset Formula $2$
\end_inset

, et du coup, il faut montrer que la cat de foncteurs preservant les pullbacks
 est booleenne (sauf qu'a priori, je ne sais pas qu'un mono dans 
\begin_inset Formula $Nom$
\end_inset

 c'est un mono dans les prefaisceaux? si par la caracterisation en termes
 de pullbacks), et ca n'a pas l'air evident.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Main result
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Main-result"

\end_inset


\end_layout

\begin_layout Standard
Our main result is that a coequaliser diagram in 
\begin_inset Formula $\Kl T$
\end_inset

 either has no unifier, either can be decomposed further.
 An additionnal argument is necessary to ensure termination of the decomposition
, for coequaliser diagrams selecting objects in 
\begin_inset Formula $D^{+}$
\end_inset

.
\end_layout

\begin_layout Standard
But first let us rephrase the statement.
\end_layout

\begin_layout Definition
Given a category 
\begin_inset Formula $E$
\end_inset

, let 
\begin_inset Formula $E^{*}$
\end_inset

 be 
\begin_inset Formula $E$
\end_inset

 extended freely with a terminal object.
\end_layout

\begin_layout Remark
Adding a terminal object results in adding a terminal cocone to all diagrams.
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
As a consequence, we have a following lemma.
\end_layout

\begin_layout Lemma
Let 
\begin_inset Formula $J$
\end_inset

 be a diagram in a category 
\begin_inset Formula $E$
\end_inset

.
 The following are equivalent:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $J$
\end_inset

 has a colimit has long as its category of cocones is not empty.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $J$
\end_inset

 has a colimit in 
\begin_inset Formula $E^{*}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Thus, we are going to work in 
\begin_inset Formula $\Kl T^{*}$
\end_inset

 rather than 
\begin_inset Formula $\Kl T$
\end_inset

.
\end_layout

\begin_layout Standard
The following result is also useful.
\end_layout

\begin_layout Lemma
Given a category 
\begin_inset Formula $E$
\end_inset

, the canonical functor 
\begin_inset Formula $E\rightarrow E^{*}$
\end_inset

 creates colimits.
\end_layout

\begin_layout Standard
This has some consequences: 
\end_layout

\begin_layout Enumerate
whenever the colimit in 
\begin_inset Formula $\Kl T^{*}$
\end_inset

 is not the terminal object, it is also a colimit in 
\begin_inset Formula $\Kl T$
\end_inset

;
\end_layout

\begin_layout Enumerate
existing colimits in 
\begin_inset Formula $\Kl T$
\end_inset

 are also colimits in 
\begin_inset Formula $\Kl T^{*}$
\end_inset

;
\end_layout

\begin_layout Enumerate
in particular, coproducts in 
\begin_inset Formula $\Kl T$
\end_inset

 (which are computed in 
\begin_inset Formula $\C$
\end_inset

) are also coproducts in 
\begin_inset Formula $\Kl T^{*}$
\end_inset

.
\end_layout

\begin_layout Notation
We denote by 
\begin_inset Formula $\top$
\end_inset

 the terminal object and by 
\begin_inset Formula $!$
\end_inset

 any terminal morphism.
\end_layout

\begin_layout Section
Notations
\end_layout

\begin_layout Standard
We denote the identity morphism at an object 
\begin_inset Formula $x$
\end_inset

 by 
\begin_inset Formula $1_{x}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $(g_{i}:A_{i}\rightarrow B)_{i\in I}$
\end_inset

 is a family of arrows, we denote by 
\begin_inset Formula $[g_{i}]:\coprod_{i\in I}A_{i}\rightarrow B$
\end_inset

 the induced coproduct pairing.
\end_layout

\begin_layout Standard
Coproduct injections 
\begin_inset Formula $A_{i}\rightarrow\coprod_{i\in I}A_{i}$
\end_inset

 are typically denoted by 
\begin_inset Formula $in_{i}$
\end_inset

.
\end_layout

\begin_layout Standard
Given an adjunction 
\begin_inset Formula $L\dashv R$
\end_inset

 and a morphism 
\begin_inset Formula $f:A\rightarrow RB$
\end_inset

, we denote by 
\begin_inset Formula $f^{*}:LA\rightarrow B$
\end_inset

 its transpose, and similarly, if 
\begin_inset Formula $g:LA\rightarrow B$
\end_inset

, then 
\begin_inset Formula $g^{*}:A\rightarrow RB$
\end_inset

.
 In particular, a Kleisli morphism 
\begin_inset Formula $f:A\rightarrow TB$
\end_inset

 induces a morphism 
\begin_inset Formula $f^{*}:TA\rightarrow TB$
\end_inset

 through the adjunction between 
\begin_inset Formula $\Kl T$
\end_inset

 and 
\begin_inset Formula $\C$
\end_inset

.
\end_layout

\begin_layout Standard
We denote the Kleisli composition of 
\begin_inset Formula $f:A\rightarrow TB$
\end_inset

 and 
\begin_inset Formula $g:TB\rightarrow TC$
\end_inset

 by 
\begin_inset Formula $f[g]=g^{*}\circ f$
\end_inset

.
\end_layout

\begin_layout Section
Pruning phase
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:pruning-phase"

\end_inset


\end_layout

\begin_layout Standard
Here we want to compute a pushout diagram in 
\begin_inset Formula $\Kl T^{*}$
\end_inset

, where one branch is a coproduct of free morphisms.
\begin_inset Formula 
\[
\xymatrix{\coprod_{i}KA_{i}\ar[r]^{\coprod_{i}Kf_{i}}\ar[d]_{[g_{i}]} & \coprod_{i}KB_{i}\ar[r]^{\eta} & T\coprod_{i}KB_{i}\ar[d]^{[u_{i}]}\\
X\ar[rr]_{\sigma} &  & Z
}
\]

\end_inset

where 
\begin_inset Formula $g_{i}:KA_{i}\rightarrow X$
\end_inset

 and 
\begin_inset Formula $u_{i}\in\hom_{\Kl T^{*}}(KB_{i},Z)$
\end_inset

.
 We denote such a situation by
\begin_inset Formula 
\[
X\vdash f_{1}:=g_{1},f_{2}:=g_{2},\dots\Rightarrow u_{1},u_{2},\dots;\sigma\dashv Z
\]

\end_inset

 abbreviated as 
\begin_inset Formula 
\[
X\vdash\vec{f}:=\vec{g}\Rightarrow\vec{u};\sigma\dashv Z
\]

\end_inset


\end_layout

\begin_layout Standard
or even
\begin_inset Formula 
\[
X\vdash(f_{i})_{i}:=g\Rightarrow u;\sigma\dashv Z
\]

\end_inset

 with 
\begin_inset Formula $g=[g_{i}]$
\end_inset

 and 
\begin_inset Formula $u=[u_{i}]$
\end_inset

.
\end_layout

\begin_layout Standard
The simplest case is when the coproduct is empty: then, the pushout is 
\begin_inset Formula $X$
\end_inset

.
\begin_inset Formula 
\[
\dfrac{}{X\vdash\vec{()}:=\vec{()}\Rightarrow\vec{()};1_{X}\dashv X}
\]

\end_inset


\end_layout

\begin_layout Standard
Another simple case is when 
\begin_inset Formula $X=\top$
\end_inset

.
 Then, the pushout is the terminal cocone.
 Thus we have the rule
\begin_inset Formula 
\[
\dfrac{}{\top\vdash\vec{f}:=\vec{g}\Rightarrow\vec{!};!\dashv\top}
\]

\end_inset


\end_layout

\begin_layout Standard
The pushout can be decomposed into smaller components.
\begin_inset Formula 
\[
\dfrac{X\vdash\vec{f}:=\vec{g}\Rightarrow\vec{u};\sigma\dashv Z\qquad Z\vdash\vec{f'}:=\vec{g'}[\sigma]\Rightarrow\vec{u'};\sigma'\dashv Z'}{X\vdash\vec{f},\vec{f'}:=\vec{g},\vec{g'}\Rightarrow\vec{u}[\sigma],\vec{u'};\sigma\dashv Z}
\]

\end_inset

This follows from the following general lemma.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:coeq-stepwise"

\end_inset

Let 
\begin_inset Formula $f_{1},g_{1}:A_{1}\rightarrow B$
\end_inset

 and 
\begin_inset Formula $f_{2},g_{2}:A_{2}\rightarrow B$
\end_inset

 be morphisms in some category.
 Then the coequaliser of the induced parallel morphism 
\begin_inset Formula $A_{1}\coprod A_{2}\rightrightarrows B$
\end_inset

 is the morphism 
\begin_inset Formula $B\rightarrow C\rightarrow D$
\end_inset

 defined as follows (assuming the involved coequalisers exist):
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $B\rightarrow C$
\end_inset

 is the coequaliser of 
\begin_inset Formula $A_{1}\rightrightarrows B$
\end_inset

;
\end_layout

\begin_layout Enumerate
\begin_inset Formula $C\rightarrow D$
\end_inset

 is the coequaliser of 
\begin_inset Formula $A_{2}\rightrightarrows B\rightarrow C$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Thanks to the previous rule, we can focus on the case where the coproduct
 is the singleton (since we focus on finite coproducts of elements of 
\begin_inset Formula $D$
\end_inset

).
 Thus, we want to compute the pushout
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{Kf}\ar[d]_{g} & KB\ar[r]^{\eta} & TKB\\
TC
}
\]

\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $TC\simeq I+C+\coprod_{i}R_{i}TC\times S_{i}$
\end_inset

 (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:F-shape"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and 
\begin_inset Formula $KA$
\end_inset

 is connected (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:tiny"
plural "false"
caps "false"
noprefix "false"

\end_inset

), 
\begin_inset Formula $KA\rightarrow TC$
\end_inset

 factors through one of the following coproduct injections:
\end_layout

\begin_layout Itemize
\begin_inset Formula $in_{I}:I\hookrightarrow TC$
\end_inset

 (variable case)
\end_layout

\begin_layout Itemize
\begin_inset Formula $\eta:C\hookrightarrow TC$
\end_inset

 (metavariable case)
\end_layout

\begin_layout Itemize
\begin_inset Formula $in_{i}:R_{i}TC\times S_{i}\hookrightarrow TC$
\end_inset

 (operation case)
\end_layout

\begin_layout Standard
In the next subsections, we discuss the different cases.
 
\end_layout

\begin_layout Subsection
Case 
\begin_inset Formula $KA\hookrightarrow I$
\end_inset


\end_layout

\begin_layout Standard
A cocone in 
\begin_inset Formula $\Kl T$
\end_inset

 is given by an object 
\begin_inset Formula $Y$
\end_inset

 with morphisms 
\begin_inset Formula $KB\rightarrow TY\leftarrow C$
\end_inset

 such that the following diagram commutes.
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{Kf}\ar[d]_{g} & KB\ar[d]\\
I\ar[r] & TY
}
\]

\end_inset

Since 
\begin_inset Formula $KB$
\end_inset

 is connected (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:tiny"
plural "false"
caps "false"
noprefix "false"

\end_inset

), by extensivity (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:extensive"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and definition of 
\begin_inset Formula $T$
\end_inset

 (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:F-shape"
plural "false"
caps "false"
noprefix "false"

\end_inset

), 
\begin_inset Formula $KB\rightarrow TY$
\end_inset

 factors through 
\begin_inset Formula $I\hookrightarrow TY$
\end_inset

.
 Therefore, a unifier is equivalently an object 
\begin_inset Formula $Y\in D^{+}$
\end_inset

 with a morphism 
\begin_inset Formula $KC\rightarrow TY$
\end_inset

 and a morphism 
\begin_inset Formula $u:KB\rightarrow I$
\end_inset

 that makes the following diagram commute.
\begin_inset Formula 
\[
\xymatrix{KA\ar[rr]^{Kf}\ar[rd]_{g} &  & KB\ar[ld]^{u}\\
 & I
}
\]

\end_inset

We already know that such a morphism 
\begin_inset Formula $KB\rightarrow I$
\end_inset

 is unique, as the top morphism is epimorphic by Assumptions
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:finite-connected"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:epis"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Therefore, we have the following rule in case there exists such a 
\begin_inset Formula $u$
\end_inset

.
\begin_inset Formula 
\[
\dfrac{g=u\circ Kf}{C\vdash f:=in_{I}\circ g\Rightarrow in_{I}\circ u;1_{C}\dashv C}
\]

\end_inset

and the following rule in case no such morphism exists (this happens concretely
 for 
\begin_inset Formula $M(x):=y$
\end_inset

 when 
\begin_inset Formula $y\neq x$
\end_inset

).
\begin_inset Formula 
\[
\dfrac{\forall u:KB\rightarrow I,g\neq u\circ Kf}{C\vdash f:=in_{I}\circ g\Rightarrow!;!\dashv\top}
\]

\end_inset


\end_layout

\begin_layout Remark
If 
\begin_inset Formula $Kf$
\end_inset

 is effective (e.g., if 
\begin_inset Formula $\C$
\end_inset

 is a topos, as is the case of nominal sets), then the existence of such
 a 
\begin_inset Formula $u$
\end_inset

 is equivalent to 
\begin_inset Formula $g$
\end_inset

 coequalising the kernel of 
\begin_inset Formula $Kf$
\end_inset

.
\end_layout

\begin_layout Subsection
Case 
\begin_inset Formula $KA\hookrightarrow C$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:pruning-metavar"

\end_inset


\end_layout

\begin_layout Standard
We want to compute the pushout of free morphisms
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{Kf}\ar[d]_{g} & KB\ar[r]^{\eta} & TKB\\
C\ar[d]_{\eta}\\
TC
}
\]

\end_inset

Since the functor 
\begin_inset Formula $\C\rightarrow\Kl T$
\end_inset

 is left adjoint, the pushout can be computed in 
\begin_inset Formula $\mathcal{C}$
\end_inset

, and it exists by Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:presentable"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Therefore, we have the rule
\begin_inset Formula 
\[
\dfrac{\begin{array}{c}
\xymatrix{KA\ar[r]^{Kf}\ar[d]_{g} & KB\ar[d]^{u}\\
C\ar[r]_{\sigma} & D
}
\end{array}\text{is a pushout}}{C\vdash f:=\eta\circ g\Rightarrow\eta\circ u;T\sigma\dashv D}
\]

\end_inset


\end_layout

\begin_layout Subsection
Case 
\begin_inset Formula $KA\hookrightarrow R_{i}TC\times S_{i}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:case-KA-RiTC"

\end_inset


\end_layout

\begin_layout Standard
We want to compute the pushout
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{Kf}\ar[d]_{g} & KB\ar[r]^{\eta} & TKB\\
R_{i}TC\ar[d]_{in_{i}}\times S_{i}\\
TC
}
\]

\end_inset

A cocone in 
\begin_inset Formula $\Kl T$
\end_inset

 is given by an object 
\begin_inset Formula $Y$
\end_inset

 with morphisms 
\begin_inset Formula $KB\rightarrow TY\leftarrow C$
\end_inset

 such that the following diagram commutes.
\begin_inset Formula 
\[
\xymatrix{KA\ar[rr]^{Kf}\ar[d]_{g} &  & KB\ar[d]\\
R_{i}TC\times S_{i}\ar[r] & R_{i}TY\times S_{i}\ar[r] & TY
}
\]

\end_inset

Since 
\begin_inset Formula $KB$
\end_inset

 is connected (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:tiny"
plural "false"
caps "false"
noprefix "false"

\end_inset

), by extensivity (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:extensive"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and definition of 
\begin_inset Formula $T$
\end_inset

 (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:F-shape"
plural "false"
caps "false"
noprefix "false"

\end_inset

), 
\begin_inset Formula $KB\rightarrow TY$
\end_inset

 factors through 
\begin_inset Formula $R_{i}TY\times S_{i}\hookrightarrow TY$
\end_inset

.
 Since 
\begin_inset Formula $R_{i}TY\times S_{i}\rightarrow TY$
\end_inset

 is monomorphic (as a coproduct injection, again by Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:extensive"
plural "false"
caps "false"
noprefix "false"

\end_inset

), a cocone in 
\begin_inset Formula $\Kl T$
\end_inset

 is given by an object 
\begin_inset Formula $Y$
\end_inset

 with morphisms 
\begin_inset Formula $C\rightarrow TY$
\end_inset

 and 
\begin_inset Formula $KB\rightarrow R_{i}TY\times S_{i}$
\end_inset

 such that the following diagram commutes.
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{Kf}\ar[d]_{g} & KB\ar[d]\\
R_{i}TC\ar[r]\times S_{i} & R_{i}TY\times S_{i}
}
\]

\end_inset

which is equivalent to the commutation of the two following diagrams
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{Kf}\ar[d]_{g_{2}} & KB\ar[d]\\
\ar[r]_{=}S_{i} & S_{i}
}
\quad\xymatrix{KA\ar[r]^{Kf}\ar[d]_{g_{1}} & KB\ar[d]\\
R_{i}TC\ar[r] & R_{i}TY
}
\]

\end_inset

Unique existence of 
\begin_inset Formula $KB\rightarrow S_{i}$
\end_inset

 making the left diagram commutes is ensured by the fact that 
\begin_inset Formula $S_{i}$
\end_inset

 is orthogonal to all morphisms (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:F-shape"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Since 
\begin_inset Formula $R_{i}$
\end_inset

 has a left adjoint 
\begin_inset Formula $L_{i}$
\end_inset

 such that 
\begin_inset Formula $L_{i}K=\int^{j}KL'_{i,j}$
\end_inset

 (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:F-shape"
plural "false"
caps "false"
noprefix "false"

\end_inset

), the right diagram is equivalent to making the following diagram commute.
\begin_inset Formula 
\[
\xymatrix{\coprod_{j}KL_{i,j}'A\ar[rr]^{\coprod_{j}KL_{i,j}'f}\ar[d]_{g_{2}^{*}} &  & \coprod_{j}KL_{i,j}'B\ar[d]^{u}\\
TC\ar[rr]_{\sigma} &  & TY
}
\]

\end_inset

Thus, this justifies the following rule
\begin_inset Formula 
\[
\dfrac{C\vdash(L'_{i,j}f)_{j}:=g_{2}^{*}\Rightarrow u;\sigma\dashv Y}{C\vdash f:=in_{i}\circ g\Rightarrow in_{i}\circ u^{*};\sigma\dashv Y}
\]

\end_inset


\end_layout

\begin_layout Section
Coequalising phase
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:coequalising-phase"

\end_inset


\end_layout

\begin_layout Standard
Here we want to compute a coequalising diagram in 
\begin_inset Formula $\Kl T^{*}$
\end_inset

, where the domain is in 
\begin_inset Formula $D^{+}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\xymatrix{\coprod_{i}KA_{i}\ar@<+.5ex>[r]^{[t_{i}]}\ar@<-.5ex>[r]_{[u_{i}]} & \Gamma\ar[r]^{\sigma} & \Delta}
\]

\end_inset

where 
\begin_inset Formula $g_{i}:KA_{i}\rightarrow X$
\end_inset

 and 
\begin_inset Formula $u_{i}\in\hom_{\Kl T^{*}}(KB_{i},Z)$
\end_inset

.
 We denote such a situation by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Gamma\vdash t_{1}=_{A_{1}}u_{1},\dots t_{p}=_{A_{p}}u_{p}\Rightarrow\sigma\dashv\Delta
\]

\end_inset

 that we sometimes abbreviate as 
\begin_inset Formula 
\[
\Gamma\vdash\vec{t}=_{\vec{A}}\vec{u}\Rightarrow\sigma\dashv\Delta
\]

\end_inset


\end_layout

\begin_layout Standard
The simplest case is when the coproduct is empty: then, the coequaliser
 is 
\begin_inset Formula $\Gamma$
\end_inset


\begin_inset Formula 
\[
\dfrac{}{\Gamma\vdash()\Rightarrow1_{\Gamma}\dashv\Gamma}
\]

\end_inset


\end_layout

\begin_layout Standard
Another simple case is when 
\begin_inset Formula $\Gamma=\top$
\end_inset

.
 Then, the pushout is the terminal cocone.
 Thus we have the rule
\begin_inset Formula 
\[
\dfrac{}{\top\vdash\vec{t}=_{\vec{A}}\vec{u}\Rightarrow!\dashv\top}
\]

\end_inset


\end_layout

\begin_layout Standard
Again, thanks to Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lem:coeq-stepwise"
plural "false"
caps "false"
noprefix "false"

\end_inset

, such a coequaliser can be decomposed into smaller components.
\begin_inset Formula 
\[
\dfrac{\Gamma\vdash t_{0}=_{n_{0}}u_{0}\Rightarrow\sigma_{0}\dashv\Delta_{1}\qquad\Delta_{1}\vdash\vec{t}[\text{\ensuremath{\sigma_{0}]}}=_{\vec{n}}\vec{u}[\text{\ensuremath{\sigma_{0}]}}\Rightarrow\sigma\dashv\Delta_{2}}{\Gamma\vdash t_{0}=_{n_{0}}u_{0},\vec{t}=_{\vec{n}}\vec{u}\Rightarrow\sigma_{0}[\sigma]\dashv\Delta_{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
Thanks to the previous rules, we can focus on the case where the coproduct
 is a singleton (since we focus on finite coproducts of elements of 
\begin_inset Formula $D$
\end_inset

), and 
\begin_inset Formula $\Gamma=TC$
\end_inset

.
 Thus, we want to compute the coequaliser
\begin_inset Formula 
\[
\xymatrix{KA\ar@<+.5ex>[r]^{t}\ar@<-.5ex>[r]_{u} & TC}
\]

\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $TC\simeq I+C+\coprod_{i}R_{i}TC$
\end_inset

 (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:F-shape"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and 
\begin_inset Formula $KA$
\end_inset

 is connected (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:tiny"
plural "false"
caps "false"
noprefix "false"

\end_inset

), 
\begin_inset Formula $t,u:KA\rightarrow TC$
\end_inset

 factor through one of the following coproduct injections:
\end_layout

\begin_layout Itemize
\begin_inset Formula $in_{I}:I\hookrightarrow TC$
\end_inset

 (variables)
\end_layout

\begin_layout Itemize
\begin_inset Formula $\eta:C\hookrightarrow TC$
\end_inset

 (metavariables)
\end_layout

\begin_layout Itemize
\begin_inset Formula $in_{i}:R_{i}TC\times S_{i}\hookrightarrow TC$
\end_inset

 (operations)
\end_layout

\begin_layout Standard
In the next subsections, we discuss the different cases.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\eta=\dots$
\end_inset

, or 
\begin_inset Formula $M(\vec{x})=...$
\end_inset

, in case of a successful occur-check, in Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:occur-check"
plural "false"
caps "false"
noprefix "false"

\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\eta=\eta$
\end_inset

, or 
\begin_inset Formula $M(\vec{x})=N(\vec{y})$
\end_inset

, in Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:case-metavars"
plural "false"
caps "false"
noprefix "false"

\end_inset

, which is partly redundant with the  previous case
\end_layout

\begin_layout Itemize
\begin_inset Formula $in_{i}=in_{i}$
\end_inset

, or 
\begin_inset Formula $o(\vec{t})=o(\vec{u})$
\end_inset

, in Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:case-op-op"
plural "false"
caps "false"
noprefix "false"

\end_inset

; 
\end_layout

\begin_layout Itemize
\begin_inset Formula $in_{I}=in_{I}$
\end_inset

, or 
\begin_inset Formula $x=y$
\end_inset

, in Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:case-var-var"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Note Note
status open

\begin_layout Itemize
\begin_inset Formula $M(\vec{x})=o(\vec{t})$
\end_inset

, in Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:case-mvar-op"
plural "false"
caps "false"
noprefix "false"

\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $M(\vec{x})=x_{i}$
\end_inset

, in Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:case-mvar-var"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let us mention schematically some other cases, which can never be unified
 in 
\begin_inset Formula $\Kl T$
\end_inset

 and thus are solved using 
\begin_inset Formula $\top$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $in_{i}=in_{i'}$
\end_inset

 with 
\begin_inset Formula $i\neq i'$
\end_inset

 (in the examples, 
\begin_inset Formula $o(\vec{t})=o'(\vec{u})$
\end_inset

 when 
\begin_inset Formula $o\neq o'$
\end_inset

)
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Formula $M(\vec{x})=y$
\end_inset

 when 
\begin_inset Formula $y\notin\vec{x}$
\end_inset

 (thi
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $in_{i}=in_{I}$
\end_inset

 (in the examples, 
\begin_inset Formula $o(\vec{t})=x$
\end_inset

)
\end_layout

\begin_layout Itemize
\begin_inset Formula $\eta=\dots$
\end_inset

 , or 
\begin_inset Formula $M(\vec{x})=u$
\end_inset

, with failing occur-check (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:occur-check"
plural "false"
caps "false"
noprefix "false"

\end_inset

), i.e., when 
\begin_inset Formula $M$
\end_inset

 appears deep in 
\begin_inset Formula $u$
\end_inset

.
\end_layout

\begin_layout Subsection
Successful occur-check
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:occur-check"

\end_inset

WIP
\end_layout

\begin_layout Standard
The occur-check phase is described in more details in Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:occur-check"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Here, we assume that 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $C\simeq KB+C'$
\end_inset

 for some 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C'$
\end_inset

; 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $t:KA\rightarrow TC$
\end_inset

 factors as 
\begin_inset Formula $KA\xrightarrow{f}KB\xhookrightarrow{in_{B}}TC\simeq KB+\dots$
\end_inset

;
\end_layout

\begin_layout Enumerate
\begin_inset Formula $u:KA\rightarrow TC$
\end_inset

 factors as 
\begin_inset Formula $KA\xrightarrow{g}TC'\xhookrightarrow{in_{TC'}}TC$
\end_inset

.
\end_layout

\begin_layout Standard
In the examples, the second condition means that 
\begin_inset Formula $t$
\end_inset

 is a metavariable, and the last condition means that this metavariable
 does not occur in 
\begin_inset Formula $u$
\end_inset

, i.e., the occur-check is successful.
\end_layout

\begin_layout Standard
Thus, the coequaliser
\begin_inset Formula 
\[
\xymatrix{KA\ar@<+.5ex>[r]^{t}\ar@<-.5ex>[r]_{u} & TC}
\]

\end_inset


\end_layout

\begin_layout Standard
is a coequaliser (in 
\begin_inset Formula $\Kl T^{*}$
\end_inset

) of the shape
\begin_inset Formula 
\[
\xymatrix{ & Y\ar[rd]\\
X\ar[ru]\ar[rd] &  & Y+Z\\
 & Z\ar[ru]
}
,
\]

\end_inset

with 
\begin_inset Formula $X=KA$
\end_inset

, 
\begin_inset Formula $Y=TKB$
\end_inset

 and 
\begin_inset Formula $Z=TC'$
\end_inset


\end_layout

\begin_layout Remark
There is a canonical isomorphism between the category of cocones over such
 a coequaliser diagram and the category of cocones over the pushout diagram
 
\begin_inset Formula $Y\leftarrow X\rightarrow Z$
\end_inset

 exists.
\end_layout

\begin_layout Remark
Therefore, computing this coequaliser amounts to computing the pushout.
 We are thus in the situation of the pruning phase, and we can justify the
 rule
\begin_inset Formula 
\[
\dfrac{C'\vdash f:=g\Rightarrow v;\sigma\dashv Z}{KB+C'\vdash in_{B}\circ f=in_{TC'}\circ g\Rightarrow[v,\sigma]\dashv Z}
\]

\end_inset


\end_layout

\begin_layout Subsection
Case 
\begin_inset Formula $M(x_{1},\dots,x_{m})=_{q}N(y_{1},\dots,y_{n})$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:case-metavars"

\end_inset

Here we are in the situation where 
\begin_inset Formula $t,u:KA\rightarrow TC$
\end_inset

 factor as 
\begin_inset Formula $t',u':KA\rightarrow C$
\end_inset

 through 
\begin_inset Formula $\eta:C\rightarrow TC$
\end_inset

.
 Note that since postcomposition with 
\begin_inset Formula $\eta$
\end_inset

 is precisely the left adjoint (and thus cocontinuous) functor from 
\begin_inset Formula $\C$
\end_inset

 to 
\begin_inset Formula $\Kl T$
\end_inset

, it is enough to compute the coequaliser in 
\begin_inset Formula $\C$
\end_inset

 and then precompose it with 
\begin_inset Formula $\eta$
\end_inset

.
\end_layout

\begin_layout Standard
We assume the following
\end_layout

\begin_layout Itemize
\begin_inset Formula $C\simeq\coprod_{i\in\{a,b\}}KB_{i}+C'$
\end_inset

, where 
\begin_inset Formula $a,b$
\end_inset

 may not be distinct (in practice 
\begin_inset Formula $C$
\end_inset

 is in 
\begin_inset Formula $D^{+}$
\end_inset

), 
\end_layout

\begin_layout Itemize
\begin_inset Formula $t',u':KA\rightarrow C$
\end_inset

 factor respectively as 
\begin_inset Formula $KB_{a}\rightarrow C$
\end_inset

 and 
\begin_inset Formula $KB_{b}\rightarrow C$
\end_inset

.
\end_layout

\begin_layout Standard
Note that if 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 are distinct, then the case we describe is redundant with some specific
 case of the pruning phase (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:pruning-metavar"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
We want to compute the coequaliser of the free algebra morphisms.
\begin_inset Formula 
\[
\xymatrix{ & KB_{a}\ar[rd]\\
KA\ar[ru]^{Kf}\ar[rd]_{Kg} &  & \coprod_{i\in\{a,b\}}KB_{i}+C'\\
 & KB_{b}\ar[ru]
}
\]

\end_inset


\end_layout

\begin_layout Lemma
The coequaliser of a diagram of this shape, in any category which has the
 involved colimits, is 
\begin_inset Formula $X+C'$
\end_inset

, where 
\begin_inset Formula $X$
\end_inset

 is the coequaliser or 
\begin_inset Formula $Kf$
\end_inset

 and 
\begin_inset Formula $Kg$
\end_inset

 if 
\begin_inset Formula $a=b$
\end_inset

, or the pushout of 
\begin_inset Formula $Kf$
\end_inset

 and 
\begin_inset Formula $Kg$
\end_inset

, otherwise.
\end_layout

\begin_layout Standard
Thanks to Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:finite-connected"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we know that such a colimit exists.
\end_layout

\begin_layout Standard
All the arguments in this section justify the following rule, whose premise
 can always be satisfied.
\begin_inset Formula 
\[
\dfrac{\xymatrix{ & KB_{a}\ar[rd]\\
KA\ar[ru]^{Kf}\ar[rd]_{Kg} &  & \coprod_{i\in\{a,b\}}KB_{i}+C'\ar[r]^{\sigma} & X\text{ is a pushout}\\
 & KB_{b}\ar[ru]
}
}{\coprod_{i\in\{a,b\}}KB_{i}+C'\vdash\eta\circ in_{a}\circ Kf=\eta\circ in_{b}\circ Kf\Rightarrow\eta\circ\sigma\dashv X}
\]

\end_inset


\end_layout

\begin_layout Subsection
Case 
\begin_inset Formula $o(\vec{t})=o(\vec{u})$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:case-op-op"

\end_inset

Here we assume that 
\begin_inset Formula $t,u:KA\rightarrow TC$
\end_inset

 factors as 
\begin_inset Formula $t',u':KA\rightarrow R_{i}TC\times S_{i}$
\end_inset

 through 
\begin_inset Formula $R_{i}TC\times S_{i}\hookrightarrow TC$
\end_inset

.
 A cocone in 
\begin_inset Formula $\Kl T$
\end_inset

 is given by an object 
\begin_inset Formula $Y$
\end_inset

 with a morphism 
\begin_inset Formula $C\xrightarrow{\sigma}TY$
\end_inset

 such that the following diagram commutes.
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{t',!}\ar[d]_{u',!} & R_{i}TC\times S_{i}\ar[r]^{R_{i}\sigma^{*}\times!} & R_{i}TY\times S_{i}\ar[d]^{in_{i}}\\
R_{i}TC\times S_{i}\ar[r]_{R_{i}\sigma^{*}\times!} & R_{i}TY\times S_{i}\ar[r]_{in_{i}} & TY
}
\]

\end_inset

Since 
\begin_inset Formula $R_{i}TY\times S_{i}\rightarrow TY$
\end_inset

 is monomorphic (as a coproduct injection, by extensivity, Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:extensive"
plural "false"
caps "false"
noprefix "false"

\end_inset

), the above commutation is equivalent to commutation of the following diagram.
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{t',!}\ar[d]_{u',!} & R_{i}TC\ar[d]^{R_{i}\sigma^{*}\times S_{i}}\times S_{i}\\
R_{i}TC\times S_{i}\ar[r]_{R_{i}\sigma^{*}\times S_{i}} & R_{i}TY\times S_{i}
}
\]

\end_inset

hich is equivalent to the commutation of the two following diagrams
\begin_inset Formula 
\[
\xymatrix{KA\ar[r]^{!}\ar[d]_{!} & S_{i}\ar[d]^{!}\\
S_{i}\ar[r]_{!} & S_{i}
}
\quad\xymatrix{KA\ar[r]^{t'}\ar[d]_{u'} & R_{i}TC\ar[d]^{R_{i}\sigma^{*}}\\
R_{i}TC\ar[r]_{R_{i}\sigma^{*}} & R_{i}TY
}
\]

\end_inset

The left one is trivial 
\color red
Don't we need subterminality of 
\begin_inset Formula $S_{i}$
\end_inset

 here? 
\color inherit
Maybe not.
 Since 
\begin_inset Formula $R_{i}$
\end_inset

 has a left adjoint 
\begin_inset Formula $L_{i}$
\end_inset

 such that 
\begin_inset Formula $L_{i}K=\int^{j}KL'_{i,j}$
\end_inset

 (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:F-shape"
plural "false"
caps "false"
noprefix "false"

\end_inset

), the right one is equivalent to making the following diagram commute.
\begin_inset Formula 
\[
\xymatrix{\coprod_{j}KL_{i,j}'A\ar[rr]^{t'^{*}}\ar[d]_{u'^{*}} &  & TC\ar[d]^{\sigma^{*}}\\
TC\ar[rr]_{\sigma^{*}} &  & TY
}
\]

\end_inset

Thus, this justifies the following rule
\begin_inset Formula 
\[
\dfrac{C\vdash t'^{*}=u'^{*}\Rightarrow\sigma\dashv Y}{C\vdash in_{i}\circ(t',!)=in_{i}\circ(u',!)\Rightarrow\sigma\dashv Y}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Formula 
\[
\dfrac{o\text{ has binding arity \ensuremath{\vec{n}}}\qquad\Gamma\vdash\vec{t}=_{q+\vec{n}}\vec{u}\Rightarrow\sigma\dashv\Delta}{\Gamma\vdash o(\vec{t})=_{q}o(\vec{u})\Rightarrow\sigma\dashv\Delta}
\]

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Case 
\begin_inset Formula $x=y$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "subsec:case-var-var"

\end_inset

Here we assume that 
\begin_inset Formula $t,u:KA\rightarrow TC$
\end_inset

 factors as 
\begin_inset Formula $t',u':KA\rightarrow I$
\end_inset

 through 
\begin_inset Formula $I\hookrightarrow TC$
\end_inset

.
 A coequalising cocone in 
\begin_inset Formula $\Kl T$
\end_inset

 is an object 
\begin_inset Formula $D$
\end_inset

 such that 
\begin_inset Formula $I\hookrightarrow TD$
\end_inset

 coequalises 
\begin_inset Formula $t'$
\end_inset

 and 
\begin_inset Formula $u'$
\end_inset

.
 Since 
\begin_inset Formula $I\hookrightarrow TD$
\end_inset

 is monomorphic (by extensivity, Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:extensive"
plural "false"
caps "false"
noprefix "false"

\end_inset

), this implies that 
\begin_inset Formula $t'=u'$
\end_inset

.
 In other words, either 
\begin_inset Formula $t'=u'$
\end_inset

 and in this case the coequaliser is just 
\begin_inset Formula $TC$
\end_inset

, either 
\begin_inset Formula $t'\neq u'$
\end_inset

 and in this case there is no unifier in 
\begin_inset Formula $\Kl T$
\end_inset

.
 The first case is a particular instance of the following rule
\begin_inset Formula 
\[
\dfrac{}{C\vdash f=f\Rightarrow1_{C}\dashv C}
\]

\end_inset

The second case can be expressed with the following rule.
\begin_inset Formula 
\[
\dfrac{t'\neq u'}{C\vdash in_{I}\circ t'=in_{I}\circ u'\Rightarrow!\dashv\top}
\]

\end_inset


\end_layout

\begin_layout Section
Occur-check
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:occur-check"

\end_inset


\end_layout

\begin_layout Standard

\color red
WIP TODO update with the new definition
\end_layout

\begin_layout Standard
The occur-check allows to jump from the coequalising phase (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:coequalising-phase"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to the pruning phase (Section
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:pruning-phase"
plural "false"
caps "false"
noprefix "false"

\end_inset

), whenever the metavariable appearing at the toplevel of the l.h.s does not
 appear in the r.h.s.
 On the other hand, if it appears on the r.h.s and is not top-level, then
 there is no unifier.
\end_layout

\begin_layout Standard
The challenge here is to define the algorithm recursively and prove it correct.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $J:\C\rightarrow\hat{D}$
\end_inset

 mapping 
\begin_inset Formula $c$
\end_inset

 to 
\begin_inset Formula $\hom_{\C}(K-,c)$
\end_inset

.
 Moreover, let 
\begin_inset Formula $G:\hat{D}\rightarrow\hat{D}$
\end_inset

 mapping 
\begin_inset Formula $P$
\end_inset

 to 
\begin_inset Formula $\coprod_{i}JS_{i}\times\prod_{j}P_{L_{i,j}-}$
\end_inset

.
 Again, 
\begin_inset Formula $JS_{i}$
\end_inset

 is subterminal.
 Then, 
\begin_inset Formula $GJ$
\end_inset

 is isomorphic to 
\begin_inset Formula $JF$
\end_inset

, i.e., the following square commutes up to isomorphism.
\begin_inset Formula 
\[
\xymatrix{\C\ar[r]^{F}\ar[d]_{J} & \C\ar[d]^{J}\\
\hat{D}\ar[r]_{G} & \hat{D}
}
\]

\end_inset

Note that 
\begin_inset Formula $J$
\end_inset

 has a left adjoint (since it is continuous), but more importantly, it preserves
 coproducts and filtered colimits colimits by Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:tiny"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 As a consequence, we the following square commutes up to isomorphism.
\begin_inset Formula 
\[
\xymatrix{\C\ar[r]^{T}\ar[d]_{J} & \C\ar[d]^{J}\\
\hat{D}\ar[r]_{G^{*}} & \hat{D}
}
\]

\end_inset


\end_layout

\begin_layout Standard
Then, we can define the size of a morphism as a universal 
\begin_inset Formula $G$
\end_inset

-algebra morphism to the constant presheaf 
\begin_inset Formula $\mathbb{N}$
\end_inset

, or define the occur-check by induction as a 
\begin_inset Formula $G$
\end_inset

-algebra morphism from 
\begin_inset Formula $\hom_{\C}(K-,T(B+C))$
\end_inset

 to 
\begin_inset Formula $\hom_{\C}(K-,TC)+1$
\end_inset

.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
en exploitant l'existence de 
\begin_inset Formula $GO\rightarrow OG$
\end_inset

, avec 
\begin_inset Formula $OX=X+1$
\end_inset

? Ou plus simplement, on voit que 
\begin_inset Formula $G(C+D)\simeq G(C)+\Gamma_{C}(D)$
\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Can we do everything by induction?
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Is 
\begin_inset Formula $G$
\end_inset

 polynomial? It preserves connected limits at least.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Formula $J$
\end_inset

 lifts to a functor 
\begin_inset Formula $J:\Kl T\rightarrow\Kl{G^{*}}$
\end_inset

 and extends to a functor 
\begin_inset Formula $\Eil T\rightarrow\Eil G$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
peut ont raisonner dans 
\begin_inset Formula $\Kl{G^{*}}?$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
J est-il plein et fidele? C'est precisement la condition de densite de 
\begin_inset Formula $J$
\end_inset

 (telle que formulle par Altenkirch&co sur les monades relatives) .
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
La question c'est quel degre de generalite a t on le resultat que dans le
 pullback
\begin_inset Formula 
\[
\xymatrix{P\ar[r]\ar[d] & ym\ar[d]^{f}\\
T(ym)\ar[r]_{f^{*}} & T(D)
}
\]

\end_inset

le mec de gauche se facotirse par 
\begin_inset Formula $T(0)+ym$
\end_inset

 ? Par exepmle, si 
\begin_inset Formula $T$
\end_inset

 est cartesien, voire parametric right adjoint?
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
What do we want? As a typical example, assume that we want to coequalise
 
\begin_inset Formula $ym\rightarrow yn\xrightarrow{u}Tyn$
\end_inset

 and 
\begin_inset Formula $ym\xrightarrow{\vec{t}}FTyn\rightarrow Tyn$
\end_inset

 which corresponds to a unification problem of the shape 
\begin_inset Formula $u=o(\vec{t})[u]$
\end_inset

.
 There should be no unifier unless 
\begin_inset Formula $o(\vec{t})$
\end_inset

 is in fact a closed term.
 so maybe, what we want is that the pullback of any 
\begin_inset Formula $yn\xrightarrow{u}TA\leftarrow Tyn\leftarrow FTyn$
\end_inset

 is the pullback of 
\begin_inset Formula $yn\xrightarrow{u}TA\leftarrow Tyn\leftarrow FTyn$
\end_inset

, somehow? in other words, in the following subdiagram where both squares
 are pullbacks, the top left morphism is an isomorphism
\begin_inset Formula 
\[
\xymatrix{P'\ar[r]^{\simeq}\ar[d] & P\ar[r]\ar[d] & yn\ar[d]\\
FT0\ar[r] & FTyn\ar[r] & TA
}
\]

\end_inset

ce serait mieux si on arrivait a generaliser sur 
\begin_inset Formula $u$
\end_inset

, genre l'egalisateur de 
\begin_inset Formula $TA_{n}\times Tyn_{n}\rightrightarrows TA_{n}$
\end_inset

 est 
\begin_inset Formula $T0$
\end_inset

, dans un format meilleur (au niveau des endofoncteurs).
 En fait ca pourrait etre 
\begin_inset Formula $TA_{n}\times FTyn\times yn\rightrightarrows TA$
\end_inset

, pour les termes et l'eglaisatuer est 
\begin_inset Formula $T0_{n}\times yn$
\end_inset

 si 
\begin_inset Formula $Tyn_{p}$
\end_inset

 est en fait 
\begin_inset Formula $FTyn_{p}$
\end_inset

.
 Et alors, 
\begin_inset Formula $A$
\end_inset

 est en fait 
\begin_inset Formula $T0$
\end_inset

? Mais donc, pourrions nous exploiter la propriete d'initialite de 
\begin_inset Formula $TA$
\end_inset

 en disant qu'on a deux morphismes 
\begin_inset Formula $TA\rightrightarrows\hom(FTy-\times y-,TA)$
\end_inset

, et que l'ealisteur c'est 
\begin_inset Formula $T0$
\end_inset

 ? 
\end_layout

\begin_layout Plain Layout
Comment ca marche exactement, point a point: puisque 
\begin_inset Formula $T$
\end_inset

 est enrichi sur 
\begin_inset Formula $Set$
\end_inset

, 
\begin_inset Formula $T$
\end_inset

 a une force 
\begin_inset Formula $X\times TA\rightarrow T(A\times X)$
\end_inset

 ou 
\begin_inset Formula $X$
\end_inset

 est un ensemble.
 Now, 
\begin_inset Formula $TA\simeq\hom(y-,TA)$
\end_inset

 et chacun des morphismes 
\begin_inset Formula $TA\rightrightarrows\hom(FTy-\times y-,TA)$
\end_inset

 
\color red
(update 07/2022: ca ressemble a une condition def aisceau !! mais non car
 c'est un produit au lieu)
\color inherit
 se factorise par 
\begin_inset Formula $\hom(y-,TA)$
\end_inset

 ou 
\begin_inset Formula $\hom(FTy-,TA)$
\end_inset

 bon le premier est trivial.
 Le second se factoris par 
\begin_inset Formula $\hom(Ty-,TA)\rightarrow\hom(FTy-,TA)$
\end_inset

.
 Donc on veut un mec de 
\begin_inset Formula $\hom(y-,TA)$
\end_inset

 dans 
\begin_inset Formula $\hom(Ty-,TA)$
\end_inset

, soit un omorhpisme de 
\begin_inset Formula $\hom(y-,TA)\times Ty-$
\end_inset

 (mais ce n'est pas contravariant!!) dans 
\begin_inset Formula $TA$
\end_inset

 mais la on utilise la force pour aller dans 
\begin_inset Formula $T(\hom(y-,TA)\times y-)\rightarrow TTA\xrightarrow{\mu}TA$
\end_inset

.
 On a donc un morphisme 
\begin_inset Formula $TA\rightarrow\hom(Ty-,TA)$
\end_inset

, donne par 
\begin_inset Formula $\hom(y-,TA)\rightarrow\hom(Ty-,TTA)\rightarrow\hom(Ty-,TA)$
\end_inset

.
 Mais est-ce que ce codomaine a une structure de 
\begin_inset Formula $T$
\end_inset

-algebre? Je ne pense pas.
 Si c'etait l'ensemble des morphismes d'algebres 
\begin_inset Formula $\hom_{\Eil T}$
\end_inset

 en revanche, oui.
 Prenant l'exemple d'une monade sur set, avec la monade des arbres binaires.
 On ne voit pas bien quelle operation binaire mettre sur 
\begin_inset Formula $TX^{T1}$
\end_inset

.
 C'est pas la recurrence sur le bon mec?Mais ca devrait marcher quand meme.
 Par contre, contre-exemple? e.g., lamdba calcul avec beta qui fait disparaitre
 des variables? Et mais ca n'a aucun sense de vouloir egaliser ca!!
\end_layout

\begin_layout Plain Layout
Bon, en repartant de l'egalisateur suppose 
\begin_inset Formula $T0_{n}\times yn\rightarrow TA_{n}\times FTyn\times yn\rightrightarrows TA$
\end_inset

, il semble que ca revient a montrer que pour 
\begin_inset Formula $u\in T0_{n}$
\end_inset

, on a le pullback
\begin_inset Formula 
\[
\xymatrix{yn\ar[d]\ar[r] & FTyn\ar[d]\\
yn\ar[r] & TA
}
\]

\end_inset

 ou les deux branches bas et droite utilisent 
\begin_inset Formula $u$
\end_inset

.
 La branche du haut se factorise par 
\begin_inset Formula $u$
\end_inset

.
 Mais ca revient, je crois, a montrer qu'on a le pullback
\begin_inset Formula 
\[
\xymatrix{yn\ar[d]\ar[r] & FTyn\ar[d]\\
yn\ar[r] & T0
}
\]

\end_inset

Bon deja, on peut prendre comme exemple l'exemple du 
\begin_inset Formula $\lambda$
\end_inset

-calcul sur 
\begin_inset Formula $Set^{\mathbb{N}}$
\end_inset

.
 Ca simplifie pas mal parce c'est discret.
\end_layout

\begin_layout Plain Layout
Pour la generalisation aux non yonedas, il faut que pour tout 
\begin_inset Formula $i$
\end_inset

, 
\begin_inset Formula $o(t)[\vec{u}]=u_{i}$
\end_inset

.
 Ce qui est impossible.
\end_layout

\begin_layout Plain Layout
Si la monade a une force cartesienne, on peut exploiter l'exponentielle
 interne.
\end_layout

\begin_layout Plain Layout
On veut montrer qu'on a un egalisateur 
\begin_inset Formula $T0\rightarrow TB^{A}\times FTA\rightrightarrows TB^{A}$
\end_inset

 Mais ca je ne suis pas sur de pouvoir le motnrer.
 Car comment faire la recurrence sur 
\begin_inset Formula $TB^{A}$
\end_inset

? Ptet on suppose que 
\begin_inset Formula $-^{A}$
\end_inset

 preserve les colimites filtrees? (donc 
\begin_inset Formula $A$
\end_inset

 est presentable).
\end_layout

\begin_layout Plain Layout
Bah deja c'est faux dans le cadre 
\begin_inset Formula $Set^{\mathbb{N}}$
\end_inset

.
 En effet, regardons la composante en 
\begin_inset Formula $n$
\end_inset

 et supposons que 
\begin_inset Formula $A_{n}=\emptyset$
\end_inset

.
 Alors 
\begin_inset Formula $X_{n}^{A}=1$
\end_inset

.
 En fait, 
\begin_inset Formula $X_{n}^{A}=X_{n}^{A_{n}}$
\end_inset

.
 Note que dans le cadre 
\begin_inset Formula $Set^{\mathbb{N}}$
\end_inset

, l'abstraction n'a pas de force cartesienne.
 Et on dirait que la monade n'en a pas pour le produit....
 ah si.
 Bon mais c'est tres bizarre cette syntaxe.
 Anyway, regardons ce que donne l'egalisateur, pour 
\begin_inset Formula $F=Id\times Id+1$
\end_inset

, dans ce cadre.
 Bon c'est peut etre pas si faux dans ce cadre en fait.
 Mais c'est quand meme embetant, plus tard, de ne pas savoir faire l'abstraction
 (cas lineaire)...
\end_layout

\begin_layout Plain Layout
Bon, et si au lieu de considerer 
\begin_inset Formula $t[u]=u$
\end_inset

 on considere le pb 
\begin_inset Formula $t[v][u]=u$
\end_inset

 ou 
\begin_inset Formula $v$
\end_inset

 est generique?
\end_layout

\begin_layout Plain Layout
Autre pb plus simple, si t generique et 
\begin_inset Formula $t[u]=u$
\end_inset

 alors 
\begin_inset Formula $t=M$
\end_inset

.
 Ben j'arrive mem pas a montrer ca.
 Bon alors le coegalisateur de deux generiques n'existe pas a moins que
 les deux generiques sont egaux? Encore une fois ca ne semble marcher que
 parce qu'on parle de yonedas.
 Mais si on calcule le coeglaisateur dans la sous cat des generiques? non
 toujours pas.
 
\end_layout

\begin_layout Plain Layout
Bon on peut essayer plus simple.
 Que deux morphismes de Kleisli generiques entre deux yonedas ont un coegalisate
urs ssi ils sont egaux.
 Non ca marche pas.
 Mais faisons l'hypothese qu l'un des deux est 
\begin_inset Formula $\eta$
\end_inset

.
\end_layout

\begin_layout Plain Layout
Bon la j'essaie de prouver que 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Preliminar induction lemma
\end_layout

\begin_layout Standard

\color red
TODO: adapt to take into account the subterminal object
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
We could work in the category of discrete presheaves since 
\begin_inset Formula $G$
\end_inset

 can be defined there as well.
 No.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let us denote 
\begin_inset Formula $G^{*}$
\end_inset

 by 
\begin_inset Formula $M$
\end_inset

.
 We want to prove by induction that the following square is a pullback for
 any 
\begin_inset Formula $u:ya\rightarrow M1$
\end_inset


\begin_inset Formula 
\[
\xymatrix{ya\times_{T1}ya+ya\ar[r]^{[-,u]}\ar[d] & M(ya+1)\ar[d]^{-[u,*]}\\
ya\ar[r]_{u} & M1
}
\]

\end_inset

^In other words, we show, by induction on 
\begin_inset Formula $u\in M1_{a}$
\end_inset

, the following property: for any 
\begin_inset Formula $f:a\rightarrow b$
\end_inset

 and 
\begin_inset Formula $t\in M(yd+1)_{b}$
\end_inset

 such that 
\begin_inset Formula $f\cdot u=t[u]$
\end_inset

, then
\end_layout

\begin_layout Itemize
either 
\begin_inset Formula $t=\eta(g)$
\end_inset

 for some 
\begin_inset Formula $g:a\rightarrow b$
\end_inset

 s.t.
 
\begin_inset Formula $f\cdotp u=g\cdotp u$
\end_inset

, 
\begin_inset Note Note
status open

\begin_layout Plain Layout
et si on supposer 
\begin_inset Formula $u:ya\rightarrow M1$
\end_inset

 mono? comme ca 
\begin_inset Formula $f=g$
\end_inset

, mais on voit pas pourquoi ce serait mono.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
either 
\begin_inset Formula $t=wk(f\cdot u)$
\end_inset


\end_layout

\begin_layout Proof
We do the induction step.
 Assume 
\begin_inset Formula $u=o(u_{1},\dots u_{n})$
\end_inset

 with 
\begin_inset Formula $u_{i}\in M1_{L_{i}a}$
\end_inset

 satisfying the property above.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $f:a\rightarrow b$
\end_inset

 and 
\begin_inset Formula $t\in M(ya+1)_{b}$
\end_inset

 such that 
\begin_inset Formula $f\cdot u=t[u]$
\end_inset

.
 Then, we may be in the first case.
 Otherwise, it must be that 
\begin_inset Formula $t=o(t_{1},\dots t_{n})$
\end_inset

 with 
\begin_inset Formula $t_{i}\in M(ya+1)_{L_{i}b}$
\end_inset

, and such that 
\begin_inset Formula $L_{i}f\cdot u_{i}=t_{i}[o(u_{1},\dots,u_{n})]\in M1_{L_{i}b}$
\end_inset

.
 Let us note that the right hand side is equal to 
\begin_inset Formula $t_{i}[\delta,*][u_{i},*]$
\end_inset

, where 
\begin_inset Formula $u_{i}:yL_{i}a\rightarrow M1$
\end_inset

 , so that 
\begin_inset Formula $\delta:ya\rightarrow M(yL_{i}a+1)$
\end_inset

 is defined (through the yoneda lemma) as the element 
\begin_inset Formula $o(\dots,u_{i-1},\eta(id),u_{i+1})\in M(yL_{i}a+1)_{a}$
\end_inset

 with 
\begin_inset Formula $\eta(id)\in M(yL_{i}a)_{L_{i}a}$
\end_inset

.
 Note that 
\begin_inset Formula $t_{i}'=^{def}t_{i}[\delta,*]\in M(yL_{i}a+1)_{L_{i}b}$
\end_inset

.
 We apply the induction hypothesis for 
\begin_inset Formula $t_{i}'[u_{i}]=L_{i}f\cdot u_{i}$
\end_inset

.
 For any 
\begin_inset Formula $i$
\end_inset

, 
\end_layout

\begin_deeper
\begin_layout Enumerate
either 
\begin_inset Formula $t_{i}'=\eta(g_{i})$
\end_inset

 for some 
\begin_inset Formula $g_{i}:L_{i}a\rightarrow L_{i}b$
\end_inset

 such that 
\begin_inset Formula $L_{i}f\cdot u_{i}=g_{i}\cdot u_{i}$
\end_inset


\end_layout

\begin_layout Enumerate
either 
\begin_inset Formula $t_{i}'=L_{i}f\cdot u_{i}\in M1_{L_{i}b}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
The first case is in fact impossible, for in this case, we have a commuting
 square
\begin_inset Formula 
\[
\xymatrix{yL_{i}b\ar[d]_{g_{i}}\ar[rr]^{t_{i}} &  & M(ya+1)\ar[d]^{-[\delta,*]}\\
yL_{i}a\ar[rr] &  & M(yL_{i}a+1)
}
\]

\end_inset

which can be rewritten as
\end_layout

\begin_layout Proof
\begin_inset Formula 
\[
\xymatrix{yL_{i}b\ar[dd]_{g_{i}}\ar[rr]^{t_{i}} &  & ya+1+GM(ya+1)\ar[dd]^{-[\delta,*]}\\
\\
yL_{i}a\ar[rr]_{in_{1}} &  & yL_{i}a+1+GM(yL_{i}a+1)
}
\]

\end_inset


\end_layout

\begin_layout Proof
By extensivity, 
\begin_inset Formula $t_{i}$
\end_inset

 cannot factor neither through 
\begin_inset Formula $1\rightarrow ya+1+GM(ya+1)$
\end_inset

 nor through 
\begin_inset Formula $GM(ya+1)$
\end_inset

.
 Thus, 
\begin_inset Formula $t_{i}$
\end_inset

 factors through 
\begin_inset Formula $ya\rightarrow ya+1+GM(ya+1)$
\end_inset

.
 But 
\begin_inset Formula $ya\xrightarrow{\delta}M(yL_{i}a+1)$
\end_inset

 factors through 
\begin_inset Formula $GM(yL_{i}a+1)\rightarrow M(yL_{i}a+1)$
\end_inset

 so commutation is impossible.
\end_layout

\begin_layout Proof
The second case implies that 
\begin_inset Formula $t_{i}$
\end_inset

 is in fact in 
\begin_inset Formula $M(A)_{L_{i}d}$
\end_inset

.
\end_layout

\begin_layout Proof
Indeed, then we have a commuting square
\begin_inset Formula 
\[
\xymatrix{yL_{i}b\ar[rr]^{t_{i}}\ar[d]_{L_{i}f} &  & M(ya+1)\ar[d]^{\delta}\\
yL_{i}a\ar[r]_{u_{i}} & M1\ar[r]_{Min_{2}} & M(yL_{i}a+1)
}
\]

\end_inset

Let us detail the second square.
 Since 
\begin_inset Formula $M$
\end_inset

 preserves pullbacks, it is enough to prove that the following square is
 a pullback.
\begin_inset Formula 
\[
\xymatrix{MB'\ar[r]\ar[d]_{=} & A+M(A+B')\ar[d]\\
MB'\ar[r] & M(A+B')
}
\]

\end_inset

But then, it is enough to see that the following squares are pullbacks
\begin_inset Formula 
\[
M\xymatrix{\emptyset\ar[r]\ar[d] & A\ar[d]\\
\emptyset\ar[r]\ar[d] & MA\cong A+GMA\ar[d]\\
MB'\ar[r] & M(A+B')
}
\]

\end_inset

Then, by Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lem:pbk-free-mon-ext"
plural "false"
caps "false"
noprefix "false"

\end_inset

, this squares decomposes as
\begin_inset Formula 
\[
\xymatrix{yL_{i}b\ar[r]\ar[d]_{L_{i}f} & M1\ar[d]_{=}\ar[r]^{Min_{2}} & M(ya+1)\ar[d]^{\delta}\\
yL_{i}a\ar[r]_{u_{i}} & M1\ar[r]_{Min_{2}} & M(yL_{i}a+1)
}
\]

\end_inset


\end_layout

\begin_layout Proof
This means that 
\begin_inset Formula $t_{i}=wk(L_{i}f\cdot u_{i})$
\end_inset

.
\end_layout

\begin_layout Proof
Then, can we conclude anything? I think so
\end_layout

\begin_layout Question
Is there a better categorical proof? (maybe using that fact that 
\begin_inset Formula $yd$
\end_inset

 is tiny)
\end_layout

\begin_layout Corollary
Given any 
\begin_inset Formula $A\xrightarrow{\sigma}M1$
\end_inset

, and a commuting square 
\begin_inset Formula 
\[
\xymatrix{P\ar[r]\ar[d] & M(yd+A)\ar[d]^{[u,\sigma]^{*}}\\
yd\ar[r]_{u} & M1
}
\]

\end_inset

the top morphism factors either by 
\begin_inset Formula $yd\rightarrow M(yd+A)$
\end_inset

 or by 
\begin_inset Formula $MA\rightarrow M(yd+A)$
\end_inset


\end_layout

\begin_layout Proof
Note that by the previous result, this is true if 
\begin_inset Formula $A=1$
\end_inset

 and 
\begin_inset Formula $\sigma=\eta_{1}:1\rightarrow M1$
\end_inset

.
 Now, the right morphism is equal to 
\begin_inset Formula $M(yd+A)\rightarrow M(yd+1)\rightarrow M1$
\end_inset

, so that the previous result, this means that this square decomposes as
\begin_inset Formula 
\[
\xymatrix{P\ar[r]\ar[d] & M(yd+A)\ar[d]\\
P'\ar[r]\ar[d] & M(yd+1)\ar[d]\\
yd\ar[r]_{u} & M1
}
\]

\end_inset

where the bottom square is a pullback.
\end_layout

\begin_layout Proof
If the middle horizontal morphism factors through 
\begin_inset Formula $yd\rightarrow M(yd+1)$
\end_inset

 then top one factors through 
\begin_inset Formula $yd\rightarrow Myd$
\end_inset

 because the following square is a pullback, by Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lem:pbk-free-mon-ext"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Formula 
\[
\xymatrix{yd\ar[d]\ar[r] & M(yd+A)\ar[d]\\
yd\ar[r] & M(yd+1)
}
\]

\end_inset


\end_layout

\begin_layout Proof
Otherwise, the middle horizontal factors as 
\begin_inset Formula $M1\rightarrow M(yd+1)$
\end_inset

.
 But then, the top one factors through 
\begin_inset Formula $MA\rightarrow M(yd+A)$
\end_inset

 because the following square is a pullback, by Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lem:pbk-free-mon-ext-2"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset Formula 
\[
\xymatrix{MA\ar[d]\ar[r] & M(yd+A)\ar[d]\\
M1\ar[r] & M(yd+1)
}
\]

\end_inset


\end_layout

\begin_layout Corollary
Given 
\begin_inset Formula $\sigma:\Gamma\rightarrow T1$
\end_inset

, 
\begin_inset Formula $u:Kd\rightarrow T1$
\end_inset

, 
\begin_inset Formula $f:Kc\rightarrow Kd$
\end_inset

, if the following square commutes, then the top morphism factors through
 either 
\begin_inset Formula $T\Gamma\rightarrow T(Kd+\Gamma)$
\end_inset

 or 
\begin_inset Formula $Kd\rightarrow TKd$
\end_inset


\begin_inset Formula 
\[
\xymatrix{Kc\ar[d]_{f}\ar[r] & T(Kd+\Gamma)\ar[d]^{[u,\sigma]^{*}}\\
Kd\ar[r]_{u} & T1
}
\]

\end_inset


\end_layout

\begin_layout Proof
Apply 
\begin_inset Formula $J$
\end_inset

 to this diagram, and you get
\begin_inset Formula 
\[
\xymatrix{yc\ar[d]_{f}\ar[r] & M(yd+J\Gamma)\ar[d]^{[u,\sigma]^{*}}\\
yd\ar[r]_{u} & M1
}
\]

\end_inset

then apply the previous corollary.
 Note that we are not working with discrete presheave here
\begin_inset Note Note
status open

\begin_layout Plain Layout
, but by universal property of the pullback, it should work even if it were
 discrete presheaves before (TODO: think about this)
\end_layout

\end_inset

.
\end_layout

\begin_layout Question
Can we do the whole algorithm by translating it in the presheaf world?
\end_layout

\begin_layout Section
Termination
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:Termination"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Ask for a strict monoidal functor 
\begin_inset Formula $D^{+}\rightarrow\mathbb{N}^{\otimes}$
\end_inset

?
\end_layout

\begin_layout Plain Layout
Maybe we don't need because tiny objects are connected objects and they
 are special in an extensive cat, cf prop 4.1 nlab on extensive cat.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TODO The usual termination argument should apply (but we need first to disambigu
ate the rules above).
 Indeed, because objects of 
\begin_inset Formula $D$
\end_inset

 are connected (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:tiny"
plural "false"
caps "false"
noprefix "false"

\end_inset

) in an extensive category (Assumption
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "assu:extensive"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we can define without ambiguity the 
\emph on
size
\emph default
 of a 
\emph on
context
\emph default
 (i.e., an element of 
\begin_inset Formula $D^{+}$
\end_inset

) as the length of the coproduct.
\end_layout

\begin_layout Section
Applications
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:applications"

\end_inset


\end_layout

\begin_layout Subsection
Nominal sets (untyped)
\end_layout

\begin_layout Subsection
Nominal sets, simply-typed
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $T$
\end_inset

 be the set of simple types.
 Here we consider the category of functors 
\begin_inset Formula $(Set_{f}^{T}\times T)_{m}\rightarrow Set$
\end_inset

, where 
\begin_inset Formula $Set_{f}^{T}$
\end_inset

 is the category of finite families indexed by 
\begin_inset Formula $T$
\end_inset

 (it is equivalent to the comma category 
\begin_inset Formula $J/T$
\end_inset

, where 
\begin_inset Formula $J:\mathbb{F}\rightarrow Set$
\end_inset

 is the canonical inclusion), and the indice 
\begin_inset Formula $-_{m}$
\end_inset

 means that we restrict to monomorphisms.
 Based on the paragraph before Section 8 in 
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:journals/acs/Menni03"
literal "false"

\end_inset

 (
\color red
the author says he will present more explictly these results later, but
 I couldn't find a reference)
\color inherit
, we can argue that it is a Grothendieck topos based on the following fact:
 products of Grothendieck topos are topos.
\end_layout

\begin_layout Itemize
this category is boolean (meaning any subobject has a complement), 
\end_layout

\begin_layout Itemize
has effective unions (not sure what it means)
\end_layout

\begin_layout Itemize
has finite limits (it is even complete)
\end_layout

\begin_layout Itemize
has finite coproducts (coproducts commute with pullbacks)
\end_layout

\begin_layout Itemize
there is no infinite chain of proper subobjects
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Remark
Meilleure idee: utiliser Menni, mais avec l'idee que les topos de Grothendieck
 sont stables pare produits.
\end_layout

\begin_layout Remark
de condition pour que la preuve de Elephant passe.
\end_layout

\begin_deeper
\begin_layout Itemize
tous les morphismes sont monos
\end_layout

\begin_layout Itemize
pushouts et pullbacks.
\end_layout

\begin_layout Itemize
les cotenseurs finis non vides existent (coproduits fini non vides avec
 soi-meme), donc 
\begin_inset Formula $q+q$
\end_inset

 existe et si 
\begin_inset Formula $m+q$
\end_inset

 existe alors 
\begin_inset Formula $m+q+q$
\end_inset

 aussi.
\end_layout

\begin_layout Itemize
(dans la lignee boolean) pour tout mono 
\begin_inset Formula $A\rightarrow X$
\end_inset

, il existe 
\begin_inset Formula $B\rightarrow X$
\end_inset

 tels que 
\begin_inset Formula $X$
\end_inset

 est le coproduit 
\begin_inset Formula $A+B$
\end_inset

.
\end_layout

\begin_layout Itemize
les coproduits sont pullback stable.
\begin_inset Formula 
\[
\xymatrix{X\ar[d]\ar[r] & X+B\ar[d]\\
Y\ar[r] & Y+B
}
\]

\end_inset


\end_layout

\begin_layout Plain Layout
Note: si 
\begin_inset Formula $f:A\rightarrow B$
\end_inset

 et 
\begin_inset Formula $A+C$
\end_inset

 existe, alors on peut definir 
\begin_inset Formula $B+C$
\end_inset

 (par un pushout de 
\begin_inset Formula $X+B$
\end_inset

 et 
\begin_inset Formula $Y$
\end_inset

) si 
\begin_inset Formula $A+B$
\end_inset

 et 
\begin_inset Formula $B+C$
\end_inset

 existent, alors 
\begin_inset Formula $A+B+C$
\end_inset

 aussi (par un pushout).
 Mais est-ce que 
\begin_inset Formula $A+C$
\end_inset

 existe? Ce serait defini comme le complementaire de 
\begin_inset Formula $B$
\end_inset

 dans 
\begin_inset Formula $A+B+C$
\end_inset

.
 Oui, en utilisant le fait ques les coproduits sont pullback stable.
\end_layout

\begin_layout Plain Layout
Donc 
\begin_inset Formula $q\cong q+0_{q}$
\end_inset

 et si 
\begin_inset Formula $m+q$
\end_inset

 existe alors 
\begin_inset Formula $m+0_{q}\cong m$
\end_inset


\end_layout

\begin_layout Plain Layout
Par exemple, c'est un coproduit de categories comme il faut, ou l'on a vraiment
 les coproduits (c'est ptet meme equivalents)
\end_layout

\begin_layout Plain Layout
jusque ici on peut faire le premier pas.
 Je crois que le deuxieme aussi (cf pbk-schanuel.json).
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Remark
TODO: voir si ca marche avec le cas Grothendieck.
\end_layout

\begin_layout Standard
Again, we restrict to the full subcategory of functors preserving pullbacks.
 As in the case presented above, representable presheaves belong to this
 subcategory, which is stable under limits and coproducts.
 It is reflective subcategory of the total category of functors (as it is
 the category of models of some limit-sketches) and thus to show that it
 is a Grothendieck topos, it is enough to show that the left adjoint preserves
 finite limits.
\end_layout

\begin_layout Example
Consider the functor for 
\begin_inset Formula $\lambda$
\end_inset

-calculus: 
\begin_inset Formula 
\begin{align*}
F(X)_{\Gamma\vdash\sigma} & =y_{\sigma\vdash\sigma}(\Gamma\vdash\sigma) & \tag{(variables)}\\
 & +\coprod_{\tau',\sigma'}X(\Gamma,\tau'\vdash\sigma')\times y_{\vdash\tau'\Rightarrow\sigma'}(\Gamma\vdash\sigma) & \tag{(abstraction)}\\
 & +\coprod_{\tau'}X(\Gamma\vdash\tau'\Rightarrow\sigma)\times X(\Gamma\vdash\tau') & \tag{(application)}
\end{align*}

\end_inset

.
 In other words,
\begin_inset Formula 
\begin{align*}
F(X) & =\coprod_{\sigma}y_{\sigma\vdash\sigma}\\
 & +\coprod_{\tau',\sigma'}X(-,\tau'\vdash\sigma')\times y_{\vdash\tau'\Rightarrow\sigma'}\\
 & +\coprod_{\tau',\sigma}X(-\vdash\tau'\Rightarrow\sigma)\times X(-\vdash\tau')\times y_{\vdash\sigma}
\end{align*}

\end_inset

Does it satisfy the conditions? no, because the second line does not preserve
 the terminal object...
 More precisely: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $X(-,\tau'\vdash\sigma')\times y_{\vdash\tau'\Rightarrow\sigma'}$
\end_inset

 is not continuous in 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\begin_layout Subsection
Linear syntax
\end_layout

\begin_layout Standard

\color red
Should work with the new condition on 
\begin_inset Formula $S_{i}$
\end_inset


\end_layout

\begin_layout Standard
Take 
\begin_inset Formula $\C=Set^{\mathbb{N}}$
\end_inset

 and 
\begin_inset Formula $D$
\end_inset

 the full subcategory of representable presheaves.
 Intuitively, given 
\begin_inset Formula $X\in Set^{\mathbb{N}}$
\end_inset

, the set 
\begin_inset Formula $X_{n}$
\end_inset

 is the set of expressions with exactly 
\begin_inset Formula $n$
\end_inset

 (distinct) variables.
 Then, we can consider the linear lambda-calculus, as an endofunctor on
 
\begin_inset Formula $Set^{\mathbb{N}}$
\end_inset

 mapping 
\begin_inset Formula $X$
\end_inset

 to 
\begin_inset Formula $F(X)$
\end_inset

 where 
\begin_inset Formula $F(X)_{n}=y1+\coprod_{p+q=n}X_{p}\times X_{q}+(n+1)\times X_{n+1}$
\end_inset

.
 Note that we could also specify a non-linear binder by replacing 
\begin_inset Formula $(n+1)\times X_{n+1}$
\end_inset

 with 
\begin_inset Formula $\coprod_{p>n}\left(\begin{array}{c}
p\\
n
\end{array}\right)X_{p}$
\end_inset

.
 We could also have a non linear application by replacing 
\begin_inset Formula $\coprod_{p+q=n}X_{p}\times X_{q}$
\end_inset

 with 
\begin_inset Formula $X_{n}\times X_{n}$
\end_inset

.
\end_layout

\begin_layout Standard
Then, 
\begin_inset Formula $F^{*}(0)$
\end_inset

 is the linear lambda-calculus.
 
\begin_inset Formula $F^{*}(yn)$
\end_inset

 is the syntax of linear 
\begin_inset Formula $\lambda$
\end_inset

-calculus extended with one 
\begin_inset Formula $n$
\end_inset

-ary metavariable applied to 
\begin_inset Formula $n$
\end_inset

 (distinct) variables.
 
\end_layout

\begin_layout Standard
Note that 
\begin_inset Formula $F(X)$
\end_inset

 is of the shape 
\begin_inset Formula $I+\coprod_{i}X_{p_{i,1}}\times\dots\times X_{p_{i,m_{i}}}\times yn_{i}$
\end_inset

 and each 
\begin_inset Formula $X\mapsto X_{p_{i,1}}\times\dots\times X_{p_{i,m_{i}}}\times yn_{i}$
\end_inset

 is left adjoint to 
\begin_inset Formula $X\mapsto X_{n_{i}}\times(yp_{i,1}+\dots+yp_{i,m_{i}})$
\end_inset

.
 
\color red
No! But almost, i.e., if there exists a morphism 
\begin_inset Formula $A\rightarrow X_{p}\times y_{n}$
\end_inset

, then in fact 
\begin_inset Formula $A=A_{n}yn$
\end_inset

 and there exists a morphism 
\begin_inset Formula $A_{n}\times yp\rightarrow X$
\end_inset

, but the converse is false.
 
\end_layout

\begin_layout Remark
We could have done the non-linear version in this setting as well, but the
 abstract syntax is more convoluted (see the binomial coefficient) and metavaria
bles must still be linear.
\end_layout

\begin_layout Subsection
Polymorphic syntax
\end_layout

\begin_layout Standard
WIP.
 Let 
\begin_inset Formula $J^{+}:\mathbb{F}\rightarrow Set$
\end_inset

 denotes the functor mapping 
\begin_inset Formula $n$
\end_inset

 to the 
\begin_inset Formula $n+1^{th}$
\end_inset

 cardinal 
\begin_inset Formula $\{0,\dots,n\}$
\end_inset

.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $S$
\end_inset

 be a nominal set with 
\begin_inset Formula $Sn$
\end_inset

 the set of types taking free type variables in 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\begin_layout Standard
Now, contexts are of the shape 
\begin_inset Formula $n;\sigma_{1},\dots,\sigma_{p}\vdash\tau$
\end_inset

, where 
\begin_inset Formula $\sigma_{i},\tau\in Sn$
\end_inset

.
 Categorically,
\end_layout

\begin_layout Standard
We first consider the category of functors 
\begin_inset Formula $\int^{n\in\mathbb{F}_{m}}Set_{f}^{Sn}\times Tn\rightarrow Set$
\end_inset

 (this is the oplax colimit), i.e., a morphism between 
\begin_inset Formula $n,\Gamma\vdash\tau$
\end_inset

 and 
\begin_inset Formula $n',\Gamma'\vdash\tau'$
\end_inset

 is a monomorphism 
\begin_inset Formula $\sigma:n\rightarrow n'$
\end_inset

 and renamings 
\begin_inset Formula $\Gamma[\sigma]\rightarrow\Gamma'$
\end_inset

 such that 
\begin_inset Formula $\tau[\sigma]=\tau'$
\end_inset

.
 
\color red
This does not seem to fit in the previous framework.
 Indeed, what are the connected components? Do corpoducts exist in each
 of these components? 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\color red
Deja pas clair qu'il y ait un objet initial (ptet que si en fait, car on
 se retreint aux injections pour 
\begin_inset Formula $n$
\end_inset

).
 Etant donne 
\begin_inset Formula $n|\Gamma\vdash\tau$
\end_inset

, l'objet initial est 
\begin_inset Formula $n_{0}|\vdash\tau_{0}$
\end_inset

 ou 
\begin_inset Formula $n_{0}$
\end_inset

 est minimal tel qu'il existe 
\begin_inset Formula $\sigma:n_{0}\rightarrow n$
\end_inset

 avec 
\begin_inset Formula $\tau=\tau_{0}$
\end_inset

 (
\begin_inset Formula $S$
\end_inset

 preserve les wide pullbacks, donc on prend la facto generique).
\end_layout

\end_inset

.
 Are they boolean? 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\color red
Par le lemme habituel (calcul des colimites danse les opfibrations), les
 pushouts sont calcules dans les fibres.
 Il se pourrait bien que ce soit booleen.
\end_layout

\end_inset

So instead, we could take 
\begin_inset Formula $\coprod_{n\in\mathbb{F}_{m}}$
\end_inset

rather than the oplax colimit.
 But then the metavariables are not so nice.
 Can we adapt manually the proof that the cat of nominal sets is a topos
 (in the elephant)?
\end_layout

\begin_layout Example
Following 
\begin_inset CommandInset citation
LatexCommand cite
key "HamanaPoly"
literal "false"

\end_inset

, we specify System 
\begin_inset Formula $F$
\end_inset

 with the functor 
\begin_inset Formula 
\begin{align*}
F(X)_{n;\Gamma\vdash\sigma} & =V_{n;\Gamma\vdash\sigma} & \tag{variables}\\
 & +\coprod_{\tau}X(n+1;\Gamma\vdash\tau)\delta_{\sigma,\forall\tau} & \tag{type abstraction}\\
 & +\coprod_{\tau'}X(n;\Gamma\vdash\forall\tau')\times(\sigma':Sn)\delta_{\sigma,\tau'[\sigma']} & \tag{type application}\\
 & +\coprod_{\tau}X(n;\Gamma,\tau\vdash\sigma')\delta_{\sigma,\tau\Rightarrow\sigma'} & \text{\tag{abstraction}}\\
 & +\coprod_{\tau'}X(n;\Gamma\vdash\tau'\Rightarrow\sigma)\times X(n;\Gamma\vdash\tau') & \tag{application}
\end{align*}

\end_inset


\end_layout

\begin_layout Example
Here, 
\begin_inset Formula $V$
\end_inset

 is defined as 
\begin_inset Formula $V(n;\Gamma\vdash\sigma)=\#\{\sigma\in\Gamma\}$
\end_inset

.
\end_layout

\begin_layout Section
Conclusion and future work
\end_layout

\begin_layout Standard
It would be nice to allow metavariables with mixed linearity constraints.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
We need to consider something like 
\begin_inset Formula $Set^{J^{+}/SJ}$
\end_inset

, but restricted to a full subcategory embedding so that the yoneda embedding
 preserve finite connected limits.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Mais en raisonnant sur 
\begin_inset Formula $Set^{\mathbb{F}}$
\end_inset

, je ne epu pas considerer la monade T' (cf main)...
 Je pourrais travailler sur 
\begin_inset Formula $Set^{\mathbb{F}_{m}}$
\end_inset

 ou mieux, sur les ensembles nominaux tiens, comme ca tout le monde preserve
 les pushouts.
 Mais est-ce que c'est skew monoidal, bof c'est pas si grave?
\end_layout

\begin_layout Plain Layout
Mais est -ce que ca fait bien la moande des termes.
 Bof on peut la definir a la main.
 Mais comment on sait que c'est une monade? Ca se voit a la main.
 Ah mais non c'est une moande libre comme le fait remarquer le gars la Ah
 mais attend, les coproduits d'ensembles nominaux c'est complique non? Bah
 non en fait.
 J'ai quand meme besoin que 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "biblio,bib"
options "plain"

\end_inset


\end_layout

\begin_layout Section
\start_of_appendix
Some lemmas
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:pbk-free-mon-ext"

\end_inset

Let 
\begin_inset Formula $M$
\end_inset

 be an algebraically free monad on an extensive category.
 Then, for any Kleisli morphism 
\begin_inset Formula $B\rightarrow M(B')$
\end_inset

, for any object 
\begin_inset Formula $A$
\end_inset

, the following square is a pullback (TODO: refine the assumptions)
\end_layout

\begin_layout Lemma
\begin_inset Formula 
\[
\xymatrix{A\ar[r]\ar[d] & M(A+B)\ar[d]\\
A\ar[r] & M(A+B')
}
\]

\end_inset


\end_layout

\begin_layout Proof
By Lambek's lemma, 
\begin_inset Formula $M(X)\cong X+GMX$
\end_inset

 where 
\begin_inset Formula $M=G^{*}$
\end_inset

.
 Through this isomorphism, this square becomes
\begin_inset Formula 
\[
\xymatrix{A\ar[r]\ar[d] & A+B+GM(A+B)\ar[d]\\
A\ar[r] & A+B'+GM(A+B')
}
\]

\end_inset

where horizontal morphisms are left coproduct injections.
 TODO: conclude by extensivity.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:pbk-free-mon-ext-2"

\end_inset

Let 
\begin_inset Formula $M$
\end_inset

 be an algebraically free cartesian monad on an extensive category.
 Then, for any Kleisli morphism 
\begin_inset Formula $B\rightarrow MB'$
\end_inset

, the following square is a pullback (TODO: refine the assumptions)
\end_layout

\begin_layout Lemma
\begin_inset Formula 
\[
\xymatrix{MB\ar[r]\ar[d] & M(A+B)\ar[d]\\
MB'\ar[r] & M(A+B')
}
\]

\end_inset


\end_layout

\begin_layout Proof
This commuting square expands as
\begin_inset Formula 
\[
\xymatrix{MB\ar[r]^{Min_{2}}\ar[d] & M(A+B)\ar[d]\\
MMB'\ar[d]_{=}\ar[r] & M(A+M(A+B'))\ar[d]\\
MMB'\ar[r]^{MMin_{2}}\ar[d]_{\mu} & MM(A+B')\ar[d]^{\mu}\\
MB'\ar[r]_{Min_{2}} & M(A+B')
}
\]

\end_inset

where each square is a pullback square.
 
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:product-topos"

\end_inset

Grothendieck topoi are stable under products.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
citer thm 5.2.2 de Accessible
\end_layout

\end_inset


\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $(A_{i})_{i\in I}$
\end_inset

 be a family of Grothendieck topoi.
 Then, there exists a family of small categories 
\begin_inset Formula $(B_{i})_{i\in I}$
\end_inset

 such that each 
\begin_inset Formula $A_{i}$
\end_inset

 is reflective subcategory of 
\begin_inset Formula $\hat{B_{i}}$
\end_inset

 and moreover, the reflector is left exact.
 Then, 
\begin_inset Formula $\prod_{i}A_{i}\rightarrow\prod_{i}\hat{B_{i}}\cong\widehat{\coprod_{i}B_{i}}$
\end_inset

 is also coreflective and the reflector is left exact, concluding the proof.
\end_layout

\end_body
\end_document
